<!-- DRC build script -->
<project name="tm2-scala" default="all" basedir=".">

	<!-- Folders: the project setup -->
	<property name="build.dir" location="build" />
	<property name="lib.dir" location="lib" />
	<property name="deploy.dir.root" location="${build.dir}/dist" />
	<property name="deploy.dir.lib" location="${deploy.dir.root}/lib" />

	<!-- Scala-specific properties: -->
	<property name="build.prod.dir.scala" location="${build.dir}/classes/scala/prod" />
	<property name="build.test.dir.scala" location="${build.dir}/classes/scala/test" />
	<property name="build.dist.dir.scala" location="${build.dir}/dist" />
	<property name="doc.dir.scala" location="${build.dir}/doc-gen/scaladoc" />
	<property name="src.dir.scala" location="src" />
	<property name="test.dir.scala" location="src-test" />
	<property name="reports.dir.scala" location="${build.dir}/tests/scala/reports" />
	<property name="summary.dir.scala" location="${build.dir}/tests/scala/summary" />

	<property name="core.path" location="../com.quui.tm2/"/>
	<property name="agents.path" location="../com.quui.tm2.agents/"/>

	<!-- Java version config: -->
	<property name="ant.java.version" value="1.5" />

	<!-- Scala Ant tasks: -->
	<taskdef resource="scala/tools/ant/antlib.xml">
		<classpath>
			<pathelement location="${lib.dir}/scala-compiler.jar" />
			<pathelement location="${lib.dir}/scala-library.jar" />
		</classpath>
	</taskdef>

	<!-- The classpath: where the classes are to be found -->
	<path id="project.classpath">
		<pathelement location="${build.prod.dir.scala}" />
		<pathelement location="${build.test.dir.scala}" />
		<fileset dir="${lib.dir}">
			<include name="**/*.jar" />
		</fileset>
		<pathelement location="${core.path}/build/tests/classes" />
		<pathelement location="${core.path}/build/prod" />
		<fileset dir="${core.path}/lib">
			<include name="**/*.jar" />
		</fileset>
		<pathelement location="${agents.path}/build/tests/classes" />
		<pathelement location="${agents.path}/build/prod" />
		<fileset dir="${agents.path}/lib">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<target name="deploy-core-java">
		<ant antfile="${core.path}/build.xml" inheritall="false" dir="${core.path}" target="deploy"/>
	</target>

	<target name="deploy-agents">
		<ant antfile="${agents.path}/build.xml" inheritall="false" dir="${agents.path}" target="deploy" />
	</target>

	<!-- The main target to do all work -->
	<target name="all" depends="deploy-core-java, deploy-agents, deploy, doc, test-report" />

	<!-- Prepare the build: create folders -->
	<target name="prepare">
		<mkdir dir="${build.prod.dir.scala}" />
		<mkdir dir="${build.test.dir.scala}" />
		<mkdir dir="${doc.dir.scala}" />
		<mkdir dir="${build.dist.dir.scala}" />
		<mkdir dir="${reports.dir.scala}" />
		<mkdir dir="${summary.dir.scala}" />
	</target>

	<!-- Delete the generated files -->
	<target name="clean" depends="prepare">
		<delete includeemptydirs="true" failonerror="no">
			<fileset dir="${build.dir}" includes="**/*" />
			<fileset dir="${doc.dir.scala}" includes="**/*" />
			<fileset dir="${reports.dir.scala}" includes="**/*" />
			<fileset dir="output" includes="**/*" />
		</delete>
		<delete dir="${build.dir}">
		</delete>
		<delete dir="output">
		</delete>
	</target>

	<!-- Compile normal sources -->
	<target name="compile" depends="prepare">
		<scalac srcdir="${src.dir.scala}" deprecation="yes" unchecked="yes" addparams="Xlint" destdir="${build.prod.dir.scala}" classpathref="project.classpath">
			<include name="**/*.scala" />
		</scalac>
		<!-- Copy resources to be in classpath -->
		<copy todir="${build.prod.dir.scala}">
			<fileset dir="${src.dir.scala}" excludes="**/*.scala" />
		</copy>

	</target>

	<!-- Compile test sources -->
	<target name="compile-tests" depends="compile">
		<!-- Compile both Java and Scala files in the Scala tests folder, as we use Java Suites for running the tests -->
		<scalac srcdir="${test.dir.scala}" deprecation="yes" unchecked="yes" addparams="Xlint" destdir="${build.test.dir.scala}" classpathref="project.classpath">
			<include name="**/*.scala" />
		</scalac>
		<javac srcdir="${test.dir.scala}" destdir="${build.test.dir.scala}">
			<classpath refid="project.classpath" />
			<include name="**/*.java" />
			<compilerarg value="-Xlint" />
		</javac>
	</target>

	<!-- Build a distribution jar-->
	<target name="jar" depends="compile">
		<jar destfile="${build.dist.dir.scala}/amas-scala.jar" basedir="${build.prod.dir.scala}">
		</jar>
	</target>

	<!-- Deploy our jar and the libraries -->
	<target name="deploy" depends="jar">
		<copy todir="${deploy.dir.lib}">
			<!-- deploy required jars (only top level jars) -->
			<fileset dir="${lib.dir}" casesensitive="yes">
				<include name="*.jar" />
			</fileset>
			<fileset dir="${core.path}/lib" casesensitive="yes">
				<include name="*.jar" />
			</fileset>
		</copy>
	</target>

	<!-- Run the tests -->
	<target name="test" depends="compile-tests">
		<junit haltonfailure="yes" printsummary="true" showoutput="true">
			<classpath refid="project.classpath" />
			<batchtest todir="${reports.dir.scala}" filtertrace="false">
				<formatter type="xml" />
				<formatter type="brief" usefile="false"/>
				<!--For Scala, we run only the classes containing 'Suite' in their name-->
				<fileset dir="${build.test.dir.scala}" includes="**/*Suite*.class" />
			</batchtest>
		</junit>
	</target>

	<!-- Report the tests -->
	<target name="test-report" depends="test">
		<!-- collect the Scala results into a summary report -->
		<junitreport todir="${summary.dir.scala}">
			<fileset dir="${reports.dir.scala}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${summary.dir.scala}" />
		</junitreport>
		<echo message="Wrote summary test report to: ${summary.dir.scala}" />
	</target>

	<!-- Generate javadoc and scaladoc documentation-->
	<target name="doc" depends="prepare">
		<!-- the classpathref is an important detail here; without it we hit this bug: 
	        http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6442982 -->
		<scaladoc srcdir="${src.dir.scala}" destdir="${doc.dir.scala}" deprecation="yes" unchecked="yes" doctitle="DRC Scala API" classpathref="project.classpath">
			<include name="**/*.scala" />
		</scaladoc>
	</target>

</project>
